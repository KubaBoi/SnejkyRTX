(- c1^2*u2^2 - c1^2*u3^2 + 2*c1*c2*u1*u2 + 2*c1*c3*u1*u3 + 2*c1*s1*u2^2 + 2*c1*s1*u3^2 - 2*c1*s2*u1*u2 - 2*c1*s3*u1*u3 - c2^2*u1^2 - c2^2*u3^2 + 2*c2*c3*u2*u3 - 2*c2*s1*u1*u2 + 2*c2*s2*u1^2 + 2*c2*s2*u3^2 - 2*c2*s3*u2*u3 - c3^2*u1^2 - c3^2*u2^2 - 2*c3*s1*u1*u3 - 2*c3*s2*u2*u3 + 2*c3*s3*u1^2 + 2*c3*s3*u2^2 - s1^2*u2^2 - s1^2*u3^2 + 2*s1*s2*u1*u2 + 2*s1*s3*u1*u3 - s2^2*u1^2 - s2^2*u3^2 + 2*s2*s3*u2*u3 - s3^2*u1^2 - s3^2*u2^2 + x*u1^2 + x*u2^2 + x*u3^2)^(1/2)
/(u1^2 + u2^2 + u3^2)
 - (2*u1*(c1 - s1) + 2*u2*(c2 - s2) + 2*u3*(c3 - s3))/(2*(u1^2 + u2^2 + u3^2))
 - (2*u1*(c1 - s1) + 2*u2*(c2 - s2) + 2*u3*(c3 - s3))/(2*(u1^2 + u2^2 + u3^2)) 
- (- c1^2*u2^2 - c1^2*u3^2 + 2*c1*c2*u1*u2 + 2*c1*c3*u1*u3 + 2*c1*s1*u2^2 + 2*c1*s1*u3^2 - 2*c1*s2*u1*u2 - 2*c1*s3*u1*u3 - c2^2*u1^2 - c2^2*u3^2 + 2*c2*c3*u2*u3 - 2*c2*s1*u1*u2 + 2*c2*s2*u1^2 + 2*c2*s2*u3^2 - 2*c2*s3*u2*u3 - c3^2*u1^2 - c3^2*u2^2 - 2*c3*s1*u1*u3 - 2*c3*s2*u2*u3 + 2*c3*s3*u1^2 + 2*c3*s3*u2^2 - s1^2*u2^2 - s1^2*u3^2 + 2*s1*s2*u1*u2 + 2*s1*s3*u1*u3 - s2^2*u1^2 - s2^2*u3^2 + 2*s2*s3*u2*u3 - s3^2*u1^2 - s3^2*u2^2 + x*u1^2 + x*u2^2 + x*u3^2)^(1/2)
/(u1^2 + u2^2 + u3^2)
 

(s1*u1 - c2*u2 - c3*u3 - c1*u1 + s2*u2 + s3*u3 + (- c1^2*u2^2 - c1^2*u3^2 + 2*c1*c2*u1*u2 + 2*c1*c3*u1*u3 + 2*c1*s1*u2^2 + 2*c1*s1*u3^2 - 2*c1*s2*u1*u2 - 2*c1*s3*u1*u3 - c2^2*u1^2 - c2^2*u3^2 + 2*c2*c3*u2*u3 - 2*c2*s1*u1*u2 + 2*c2*s2*u1^2 + 2*c2*s2*u3^2 - 2*c2*s3*u2*u3 - c3^2*u1^2 - c3^2*u2^2 - 2*c3*s1*u1*u3 - 2*c3*s2*u2*u3 + 2*c3*s3*u1^2 + 2*c3*s3*u2^2 + r^2*u1^2 + r^2*u2^2 + r^2*u3^2 - s1^2*u2^2 - s1^2*u3^2 + 2*s1*s2*u1*u2 + 2*s1*s3*u1*u3 - s2^2*u1^2 - s2^2*u3^2 + 2*s2*s3*u2*u3 - s3^2*u1^2 - s3^2*u2^2)^(1/2))
/(u1^2 + u2^2 + u3^2)
 -(c1*u1 + c2*u2 + c3*u3 - s1*u1 - s2*u2 - s3*u3 + (- c1^2*u2^2 - c1^2*u3^2 + 2*c1*c2*u1*u2 + 2*c1*c3*u1*u3 + 2*c1*s1*u2^2 + 2*c1*s1*u3^2 - 2*c1*s2*u1*u2 - 2*c1*s3*u1*u3 - c2^2*u1^2 - c2^2*u3^2 + 2*c2*c3*u2*u3 - 2*c2*s1*u1*u2 + 2*c2*s2*u1^2 + 2*c2*s2*u3^2 - 2*c2*s3*u2*u3 - c3^2*u1^2 - c3^2*u2^2 - 2*c3*s1*u1*u3 - 2*c3*s2*u2*u3 + 2*c3*s3*u1^2 + 2*c3*s3*u2^2 + r^2*u1^2 + r^2*u2^2 + r^2*u3^2 - s1^2*u2^2 - s1^2*u3^2 + 2*s1*s2*u1*u2 + 2*s1*s3*u1*u3 - s2^2*u1^2 - s2^2*u3^2 + 2*s2*s3*u2*u3 - s3^2*u1^2 - s3^2*u2^2)^(1/2))
/(u1^2 + u2^2 + u3^2)
 
==
a = (s1*u1 - c2*u2 - c3*u3 - c1*u1 + s2*u2 + s3*u3)
        b = (u1*u1 + u2*u2 + u3*u3)
        c = (c1*u1 + c2*u2 + c3*u3 - s1*u1 - s2*u2 - s3*u3)
        d = math.sqrt(- c1*c1*u2*u2 - c1*c1*u3*u3 + 2*c1*c2*u1*u2 + 2*c1*c3*u1*u3 + 2*c1*s1*u2*u2 + 2*c1*s1*u3*u3 - 2*c1*s2*u1*u2 - 2*c1*s3*u1*u3 - c2*c2*u1*u1 - c2*c2*u3*u3 + 2*c2*c3*u2*u3 - 2*c2*s1*u1*u2 + 2*c2*s2*u1*u1 + 2*c2*s2*u3*u3 - 2*c2*s3*u2*u3 - c3*c3*u1*u1 - c3*c3*u2*u2 - 2*c3*s1*u1*u3 - 2*c3*s2*u2*u3 + 2*c3*s3*u1*u1 + 2*c3*s3*u2*u2 + r*r*u1*u1 + r*r*u2*u2 + r*r*u3*u3 - s1*s1*u2*u2 - s1*s1*u3*u3 + 2*s1*s2*u1*u2 + 2*s1*s3*u1*u3 - s2*s2*u1*u1 - s2*s2*u3*u3 + 2*s2*s3*u2*u3 - s3*s3*u1*u1 - s3*s3*u2*u2)
        